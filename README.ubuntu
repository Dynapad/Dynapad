# -*- mode: org; -*-
* ubuntu setup
I keep all my repos in =~/git/= so adjust paths accordingly if you clone elsewhere

Run the following as root.
From https://apt.kitware.com/. Needed for a recent version of =cmake=.
WARNING this adds a new ppa.
#+begin_src bash
apt update
apt install apt-transport-https ca-certificates gnupg software-properties-common wget
wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -  # EVIL
apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
apt update
#+end_src

Run the following as root.
#+begin_src bash
apt install \
build-essential \
lib64readline-dev \
libdb-dev \
libfreetype6-dev \
libmagick++-dev \
libx11-dev \
libxft-dev \
libxi-dev \
tk-dev \
libconfig-dev \
libfontconfig1-dev \
cmake \ 
ninja-build
#+end_src

This works on 19.04, but for reasons beyond my understanding fails to find tk.h on 18.10.

#+begin_src bash
pushd ~/git
git clone https://github.com/racket/racket.git
pushd racket/racket/src
./configure --enable-cs --enable-bc
make cgc
make install-cgc
popd

#~/git/racket/racket/bin/racocgc pkg install compatibility-lib htdp-lib xrepl # no longer needed

git clone git@github.com:tgbugs/dynapad.git dynapad

pushd dynapad
git checkout modularize  # temporary until changes are merged
mkdir build
pushd build
# can leave out -DRACKET_DIR on gentoo
cmake .. -G Ninja -DRACKET_DIR=${HOME}/git/racket/racket
ninja
popd

# x86_64-linux x86_64-macosx etc.
SUBPATH=$(racketcgc -e "(display (path->string (system-library-subpath)))")
# cgc build
mkdir -p dynapad/compiled/bc/native/${SUBPATH}
# on a real build libdynapad.so needs to be put at an absolute known path
# can't link against relative paths
racocgc ctool --cgc --ld dynapad/compiled/bc/native/${SUBPATH}/libdynapad_rkt.so "${PWD}/build/libdynapad.so"
racocgc pkg install dynapad/
racocgc pkg install collects/
racocgc make dynapad.rkt

racketcgc --repl --require "apps/paddraw/paddraw.rkt"

# bc build
racobc ctool --ld dynapad/compiled/bc/native/x86_64-linux/3m/libdynapad_rkt.so build/libdynapad.so
racobc pkg install dynapad/
racobc pkg install collects/
racobc make dynapad.rkt

racketbc --repl --require "apps/paddraw/paddraw.rkt"

# cs build
raco pkg install dynapad/
raco pkg install collects/
raco make dynapad.rkt

racket -it "apps/paddraw/paddraw.rkt"
#+end_src

If you run these under 3m (i.e. by launching =racket= or =racketbc=
instead of =racketcgc=) you will encounter a segfault, possibly due to
incorrect linking against 3m vs cgc, or maybe for some other reason,
for example that the precise (non-conservative) GC in 3m will collect
pointers that are referenced only from the C++ code, so we may need to
get a list of those and keep a list of them on the racket side to
prevent collection.

Note that the 3m build may not work without modification to
[[file:configure.ac]] and [[file:cmake/Modules/FindRacketCGC.cmake]]
to include =mzdyn3m.o=.
